Cursor AI Agent Scope
Reference Files
arsenal-rule.mdc – your Cursor ruleset (idempotent edits, changelogs, loop-until-complete, no hallucinations)

prompt.txt – the full project blueprint (tech stack, data strategies, architecture, UI/UX, CI/CD, maintenance)

Project Overview
Build a mini Next.js (v14) + TypeScript web app that aggregates live-stream links for top European clubs.

Consume or scrape these sources: • https://streamed.pk/category/football • https://sportsurge.bz/leagues/premier-league • https://live.totalsportek007.com/

Skip buffstreamsapp.com (informational only).

Normalize and filter only matches involving these clubs: Arsenal, Chelsea, Manchester City, Manchester United, Newcastle United, Liverpool, Barcelona, Real Madrid, AC Milan, Inter Milan, Juventus, Napoli, PSG, Bayern Munich.

Deliverables
Data Modules (in src/data/)

streamed.ts, sportsurge.ts, totalsportek.ts

Each exports Promise<Match[]>, fetches + parses + normalizes links, logs to src/logs/fetch.log.

Filter Module

src/data/filter.ts reads src/config/teams.json and exports filterMatches() for case-insensitive filtering.

API Route

pages/api/matches.ts calls all three data modules in parallel, merges, dedupes, filters, and returns JSON with proper cache headers.

Frontend

pages/index.tsx fetches /api/matches (SSR or SWR).

Components in src/components/: Header.tsx, MatchList.tsx, MatchCard.tsx.

Styling via TailwindCSS; accents in Arsenal red (#DB0007); WCAG AA compliant.

Testing

Unit tests for each data module (test/data/*.test.ts) mocking axios/cheerio or Puppeteer.

API integration tests (test/api/matches.test.ts) via Supertest.

Component tests with Jest + React Testing Library.

CI/CD

GitHub Actions workflow: lint, typecheck, test, build on push/PR.

Deploy to Vercel; environment secrets for any keys.

Documentation & Maintenance

README.md with setup + usage.

CHANGELOG.md updated per Cursor commits.

Monitor logs, integrate Sentry for runtime errors, alert on >20% 5xx.

Agent Instructions
Always load arsenal-rule.mdc and prompt.txt before editing or planning.

Follow the rule:

Plan changes in comments; enumerate files & functions.

Open files before editing; if missing, confirm before creation.

Edit idempotently, wrap HTTP calls in try/catch, log every fetch.

Reflect: verify output matches the plan; loop until complete.

Never guess. If unsure, open the file or source to inspect.

Keep going until every data module, filter, API route, UI, tests, CI, and docs are fully implemented and passing.