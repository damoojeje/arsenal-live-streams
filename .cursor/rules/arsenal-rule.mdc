---
alwaysApply: true
---
// cursor.prompt.ts
// Copy & paste this file into your Cursor AI workspace.

export const rules = [
  // 1. Project initialization
  {
    when: "start-session",
    then: [
      "Verify project root contains package.json and src/",
      "If missing, create Node.js + TypeScript project with src/, test/, and public/ folders",
    ],
  },

  // 2. Before making changes
  {
    when: "before-edit",
    then: [
      "Open the target file; if it doesn’t exist, ask for confirmation before creation",
      "Scan for existing imports, functions, and types to avoid duplication",
    ],
  },

  // 3. Data ingestion work
  {
    when: "data-module",
    then: [
      "Create one module per source under src/data/: streamed.ts, sportsurge.ts, totalsportek.ts",
      "Each module must fetch, parse, normalize, and export a typed array of { match, teams, links }",
      "Use axios for HTTP and cheerio for HTML parsing; wrap calls in try/catch",
      "Log every fetch URL and response status line-by-line in src/logs/fetch.log",
    ],
  },

  // 4. Filtering logic
  {
    when: "filter-module",
    then: [
      "Implement src/data/filter.ts that re-exports only matches involving defined clubs",
      "ClubsList must live in a single JSON file under src/config/teams.json",
      "Ensure filtering is case-insensitive and idempotent",
    ],
  },

  // 5. API routes
  {
    when: "api-route",
    then: [
      "For Next.js: under pages/api/matches.ts export default handler(req, res)",
      "Handler must import filter module, call data sources in parallel, merge, dedupe, then res.json",
      "Write automated tests under test/api/matches.test.ts verifying filter correctness",
    ],
  },

  // 6. Frontend pages
  {
    when: "ui-component",
    then: [
      "Place components under src/components/: MatchList.tsx, MatchCard.tsx, Header.tsx",
      "Design layout in src/pages/index.tsx using only Arsenal red (#DB0007) for highlights",
      "Use TailwindCSS with atomic, responsive classes; ensure WCAG AA contrast",
      "Cursor must open and review index.tsx before injecting JSX",
    ],
  },

  // 7. Commits & documentation
  {
    when: "after-edit",
    then: [
      "Stage only changed files; commit with message ‘feat: <module/feature> – Cursor AI’",
      "Append a summary of changes in CHANGELOG.md under appropriate date and heading",
    ],
  },

  // 8. Reflection & persistence
  {
    when: "before-tool-call",
    then: [
      "Plan the code changes in comments; enumerate files and functions to modify",
      "After tool output, reflect on whether it matches the plan; if not, loop",
    ],
  },

  // 9. Global enforcement
  {
    when: "any",
    then: [
      "Keep going until the job is completely solved before ending your turn",
      "Use your tools, don't guess",
      "If you are unsure about a code or files, open them—do not hallucinate",
      "Plan then reflect: plan thoroughly before every tool call and reflect on the outcome after",
    ],
  },
]